<?php

namespace Tests\Unit;

use App\Services\SyncPartsDbService;
use Faker\Core\Number;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Tests\TestCase;

class TestSyncTableInsert extends TestCase
{
    public string $config_file;
    public SyncPartsDbService $syncPartsDbService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->config_file = 'tests/config/sync-parts/sync-config-sample.php';
        $this->syncPartsDbService = (new SyncPartsDbService())->loadConfigSyncFiles($this->config_file);
    }

    public function test_sync_new_rows_and_insert()
    {
        $last_id = null;
        for($i =0; $i <= 5; $i++) {
            $insert_id = DB::table('table_A')->insertGetId([
                'name' => Str::random(10),
                'note' => '- Note ' . Str::random(20),
                'price' => (new Number())->randomNumber(5),
                'price_total' => (new Number())->randomNumber(6),
                'type' => array_rand(['t1', 't2', 't3']),
                'status' => array_rand([1, 2, 3]),
                'created_at' => now()
            ]);
            $last_id = $last_id ?? $insert_id;
        }

        $this->artisan('sync:now --laps=1 --path=' . $this->config_file)->assertOk();

        $rows = $this->syncPartsDbService->getRowsFrom($this->config_file, 'B', $last_id);
        $this->assertEquals(5, $rows->count(), 'Sincronizando desde Id: ' . $last_id);
        dd($rows);
    }
}
